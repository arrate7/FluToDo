@page "/"
@inject FluToDo.Services.ITodoService TodoService


<h1 class="themeColor1 todoHeader text-center">TODO List</h1>
<MatList>
    @foreach (var todo in Todos)
    {
        <MatListItem Class="row">
            <MatCheckbox @bind-Value=@todo.IsComplete Class="col-2" @onclick=@((e) => UpdateTodoStatus(todo))></MatCheckbox>
            @if (todo.IsComplete)
            {
                <del class="col-6">@todo.Name</del>
            }
            else
            {
                <label class="col-6">@todo.Name</label>

            }
            <MatButton Icon="edit" Class="col-2 themeColor1" OnClick=@((e) => EditTodoClicked(todo))></MatButton>
            <MatButton Icon="delete" Class="col-2 deleteColor" OnClick=@((e) => DeleteTodoClicked(todo) )></MatButton>
        </MatListItem>
        <MatDivider></MatDivider>
    }
</MatList>
<div class="fixed-button">
    <button class="round-button" @onclick=NewTodoClicked>+</button>
</div>
<MatDialog @bind-IsOpen="@dialogIsOpen">
    @if (isDelete)
    {
        <MatDialogTitle>Delete Todo</MatDialogTitle>
        <MatDialogContent>
            <p>Are you sure?</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick=@(e => { dialogIsOpen = false; })>No Thanks</MatButton>
            <MatButton OnClick=@(e=> { DeleteTodoConfirmed(); dialogIsOpen = false; })>Yes</MatButton>
        </MatDialogActions>
    }
    else
    {
        @if (isUpdate)
        {
            <MatDialogTitle>Edit Todo</MatDialogTitle>
        }
        else
        {
            <MatDialogTitle>Add new Todo</MatDialogTitle>
        }
        <MatDialogContent>
            <p>Name</p>
            <MatTextField @bind-Value=@todo.Name></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick=@(e => { dialogIsOpen = false; })>No Thanks</MatButton>
            @if (isUpdate)
            {
                <MatButton OnClick=@(e=> { UpdateTodo(); dialogIsOpen = false; })>OK</MatButton>
            }
            else
            {
                <MatButton OnClick=@(e=> { ConfirmedNewTodo(); dialogIsOpen = false; })>OK</MatButton>
            }
        </MatDialogActions>
    }
</MatDialog>

@code{

    private List<TodoItem> Todos = new List<TodoItem>();
    private bool dialogIsOpen, isUpdate, isDelete;
    private TodoItem todo = new TodoItem();

    protected override async Task OnInitializedAsync()
    {
        Todos = await TodoService.GetTodoItems();
    }
    void NewTodoClicked()
    {
        todo = new TodoItem();
        dialogIsOpen = true;
        isUpdate = isDelete = false;
    }
    async void ConfirmedNewTodo()
    {
        todo = await TodoService.AddTodoItem(todo);
        Todos.Add(todo);
    }
    async void UpdateTodoStatus(TodoItem todo)
    {
        todo.IsComplete = todo.IsComplete ? false : true;
        await TodoService.UpdateTodoItem(todo);
    }
    void EditTodoClicked(TodoItem item)
    {
        todo = item;
        dialogIsOpen = true;
        isUpdate = true;
        isDelete = false;
    }
    async void UpdateTodo()
    {
        await TodoService.UpdateTodoItem(todo);
    }
    void DeleteTodoClicked(TodoItem item)
    {
        todo = item;
        dialogIsOpen = true;
        isDelete = true;
    }
    async void DeleteTodoConfirmed()
    {
        await TodoService.DeleteTodoItem(todo.Key);
        Todos.Remove(todo);
    }
}